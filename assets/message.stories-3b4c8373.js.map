{"version":3,"file":"message.stories-3b4c8373.js","sources":["../../node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/utils/ChildMapping.js","../../node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/TransitionGroup.js","../../src/components/Message/message.tsx","../../src/components/Message/index.tsx"],"sourcesContent":["import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","import React, { FC, ReactElement } from 'react'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\nimport Icon from '../Icon/icon'\nexport type MessageType = 'info' | 'success' | 'danger' | 'warning'\n\ninterface MessageProps {\n  /**\n   * 提示文字\n   */\n  text: string\n  /**\n   * 提示类型\n   */\n  type: MessageType\n}\n\n/**\n * > message组件，\n *\n * ### 引用方法\n *\n * ``` js\n *\n * import { Button } from 'val-design'\n *\n * ```\n */\nconst Message: FC<MessageProps> = (props: MessageProps) => {\n  const { text, type } = props\n\n  const renderIcon = (msgType: MessageType): ReactElement => {\n    let msgIcon: IconProp = 'check-circle'\n\n    if (msgType === 'success') {\n      msgIcon = 'check-circle'\n    }\n    if (msgType === 'danger') {\n      msgIcon = 'times-circle'\n    }\n    if (msgType === 'warning') {\n      msgIcon = 'exclamation-circle'\n    }\n    if (msgType === 'info') {\n      msgIcon = 'info-circle'\n    }\n    return <Icon icon={msgIcon} theme={msgType} />\n  }\n\n  return (\n    <div className=\"message\">\n      <div className=\"message-content\">\n        <div className=\"icon\">{renderIcon(type)}</div>\n        <div className=\"text\">{text}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default Message\n","import React, { useState, useEffect } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { TransitionGroup } from 'react-transition-group'\nimport Transition from '../Transition/transition'\nimport Message, { MessageType } from './message'\nimport { v4 as uuidV4 } from 'uuid'\n\nexport interface MessageApi {\n  info: (text: string) => void\n  success: (text: string) => void\n  warning: (text: string) => void\n  error: (text: string) => void\n}\n\nexport interface Notice {\n  text: string\n  key: string\n  type: MessageType\n}\n\nconst getUUID = (): string => uuidV4()\n\nlet add: (notice: Notice) => void\n\nexport const MessageContainer = () => {\n  const [notices, setNotices] = useState<Notice[]>([])\n  const timeout = 3 * 1000\n  const maxCount = 10\n\n  const remove = (notice: Notice) => {\n    const { key } = notice\n    setNotices(prevNotices => prevNotices.filter(item => key !== item.key))\n  }\n\n  add = (notice: Notice) => {\n    setNotices(prevNotices => [...prevNotices, notice])\n    setTimeout(() => {\n      remove(notice)\n    }, timeout)\n  }\n\n  useEffect(() => {\n    if (notices.length > maxCount) {\n      const [firstNotice] = notices\n      remove(firstNotice)\n    }\n  }, [notices])\n\n  return (\n    <div className=\"message-container\">\n      <TransitionGroup>\n        {notices.map(({ text, key, type }) => (\n          <Transition timeout={200} in animation={'slide-in-top'} key={key}>\n            <Message type={type} text={text} />\n          </Transition>\n        ))}\n      </TransitionGroup>\n    </div>\n  )\n}\n\nlet el = document.querySelector('#message-wrapper')\nif (!el) {\n  el = document.createElement('div')\n  el.className = 'message-wrapper'\n  el.id = 'message-wrapper'\n  document.body.append(el)\n}\n\n// ReactDOM.render(<MessageContainer />, el)\n\ncreateRoot(el).render(<MessageContainer />)\n\nexport const message: MessageApi = {\n  info: text => {\n    add({\n      text,\n      key: getUUID(),\n      type: 'info',\n    })\n  },\n  success: text => {\n    add({\n      text,\n      key: getUUID(),\n      type: 'success',\n    })\n  },\n  warning: text => {\n    add({\n      text,\n      key: getUUID(),\n      type: 'warning',\n    })\n  },\n  error: text => {\n    add({\n      text,\n      key: getUUID(),\n      type: 'danger',\n    })\n  },\n}\n\nexport default message\n"],"names":["getChildMapping","children","mapFn","mapper","child","isValidElement","result","Children","c","mergeChildMappings","prev","next","getValueForKey","key","nextKeysPending","pendingKeys","prevKey","i","childMapping","nextKey","pendingNextKey","getProp","prop","props","getInitialChildMapping","onExited","cloneElement","getNextChildMapping","nextProps","prevChildMapping","nextChildMapping","hasPrev","hasNext","prevChild","isLeaving","values","obj","k","defaultProps","TransitionGroup","_React$Component","_inheritsLoose","context","_this","handleExited","_assertThisInitialized","_proto","_ref","firstRender","node","currentChildMapping","state","_extends","_this$props","Component","childFactory","_objectWithoutPropertiesLoose","contextValue","React","TransitionGroupContext","TransitionGroup$1","Message","text","type","renderIcon","msgType","msgIcon","jsx","Icon","jsxs","getUUID","uuidV4","add","MessageContainer","notices","setNotices","useState","timeout","maxCount","remove","notice","prevNotices","item","useEffect","firstNotice","Transition","el","createRoot","message"],"mappings":"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","x_google_ignoreList":[0,1]}