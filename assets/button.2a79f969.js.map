{"version":3,"file":"button.2a79f969.js","sources":["../../src/components/Button/button.tsx"],"sourcesContent":["import React from 'react'\nimport classNames from 'classnames'\n\n// export enum ButtonSize {\n//   Large = 'lg',\n//   Small = 'sm'\n// }\n\n// export enum ButtonType {\n//   Primary = 'primary',\n//   Default = 'default',\n//   Danger = 'danger',\n//   Link = 'link'\n// }\n// export const tuple = <T extends string[]>(...args: T) => args\n// const ButtonHTMLTypes = tuple('submit', 'button', 'reset')\n// export type ButtonHTMLType = typeof ButtonHTMLTypes[number]\n\nexport type ButtonTypes =\n  | 'default'\n  | 'primary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'link'\n\ninterface BaseButtonProps {\n  /**\n   * 按钮类名\n   */\n  className?: string\n  /**\n   * 是否禁用\n   */\n  disabled?: boolean\n  /**\n   * 按钮大小\n   */\n  size?: 'lg' | 'sm'\n  /**\n   * 按钮类型\n   */\n  type?: ButtonTypes\n  /**\n   * 按钮原生类型\n   */\n  htmlType?: 'submit' | 'button' | 'reset'\n  /**\n   * 按钮内容\n   */\n  children: React.ReactNode | string\n  /**\n   * 链接地址\n   */\n  href?: string\n  /**\n   * 点击事件\n   */\n  onClick?: () => void\n}\n\n// 按钮原生属性类型\ntype NativeButtonProps = Record<string, unknown> &\n  BaseButtonProps &\n  Omit<React.ButtonHTMLAttributes<HTMLElement>, 'type'>\n\n// 链接原生属性类型\ntype AnchorButtonProps = BaseButtonProps &\n  React.AnchorHTMLAttributes<HTMLElement>\n\n// 将所有属性设置为可选，因为button有些链接a不具备 反之亦然\nexport type ButtonProps = Partial<NativeButtonProps & AnchorButtonProps>\n\n/**\n * > 一个简单的Button组件，可通过不同的type，选择不同的颜色风格。\n *\n * ### 引用方法\n *\n * ``` js\n *\n * import { Button } from 'val-design'\n *\n * ```\n */\nexport const Button: React.FC<ButtonProps> = (props) => {\n  const { type, disabled, size, children, href, className, ...restProps } =\n    props\n  // 默认添加btn类\n  const classes = classNames('btn', className, {\n    [`btn-${type}`]: type,\n    [`btn-${size}`]: size,\n    disabled: type === 'link' && disabled\n  })\n  if (type === 'link' && href) {\n    return (\n      <a className={classes} href={href} {...restProps}>\n        {children}\n      </a>\n    )\n  } else {\n    return (\n      <button className={classes} disabled={disabled} {...restProps}>\n        {children}\n      </button>\n    )\n  }\n}\n\nButton.defaultProps = {\n  disabled: false,\n  type: 'default'\n}\n\nexport default Button\n"],"names":["Button","__name","props","type","disabled","size","children","href","className","restProps","classes","classNames","_jsx"],"mappings":"gKAoFO,MAAAA,EAAAC,EAAAC,GAAA,CACL,KAAA,CAAM,KAAAC,EAAEA,SAAAA,EAAMC,KAAAA,EAAUC,SAAAA,EAAMC,KAAAA,EAAUC,UAAAA,KAAMC,CAAcC,EAAAA,EAG5DC,EAAAC,EAAA,MAAAH,EAAA,CAA6C,CAAA,OAAAL,KAAAA,EAC1BA,CAAAA,OAAAA,KAAAA,EACAE,SAAAA,IAAAA,QAAAA,CACYD,CAAAA,EAE/B,OAAAD,IAAA,QAAAI,EACEK,EAAA,IAAA,CACE,UAAAF,EAAcA,KAAAA,EAAS,GAAAD,EAAgBA,SAAAA,CAAvC,CAAA,EAKFG,EAAA,SAAA,CACE,UAAAF,EAAmBA,SAAAA,EAAS,GAAAD,EAAwBA,SAAAA,CAApD,CAAA,CAKL,EAtBM,UAwBPT,EAAAA,aAAAA,CAAsB,SAAA,GACV,KAAA,SADU;;;;;;;;;;;;;;;;"}